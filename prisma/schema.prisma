generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  name                 String?
  password             String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  role                 Role                  @default(ALUNO)
  academia             Academia?
  preferenciasAluno    PreferenciasAluno?
  preferenciasPersonal PreferenciasPersonal?
  assignedTasks        Task[]                @relation("AssignedTasks")
  createdTasks         Task[]                @relation("CreatedTasks")
}

model PreferenciasAluno {
  id                  Int                   @id @default(autoincrement())
  birthDate           DateTime
  gender              String
  goal                String
  healthCondition     String
  experience          String
  activityLevel       String
  physicalLimitations String
  userId              Int                   @unique @map("user_id")
  personalId          Int?
  academiaId          Int?                  @map("academia_id")
  pagamentos          Pagamento[]
  academia            Academia?             @relation(fields: [academiaId], references: [id])
  personal            PreferenciasPersonal? @relation(fields: [personalId], references: [id])
  user                User                  @relation(fields: [userId], references: [id])
  reports             Report[]
  treinos             Treino[]
}

model PreferenciasPersonal {
  id                Int                 @id @default(autoincrement())
  cref              String              @unique
  specialization    String
  birthDate         DateTime
  gender            String
  specializations   String[]
  yearsOfExperience String
  workSchedule      String
  certifications    String[]
  biography         String
  workLocation      String
  pricePerHour      String
  languages         String[]
  instagram         String?
  linkedin          String?
  userId            Int                 @unique @map("user_id")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  academiaId        Int?                @map("academia_id")
  students          PreferenciasAluno[]
  academia          Academia?           @relation(fields: [academiaId], references: [id])
  user              User                @relation(fields: [userId], references: [id])
  reports           Report[]
}

model Academia {
  id                   Int                    @id @default(autoincrement())
  cnpj                 String                 @unique
  endereco             String
  telefone             String
  horarioFuncionamento String
  descricao            String
  comodidades          String[]
  planos               String[]
  website              String?
  instagram            String?
  facebook             String?
  userId               Int                    @unique @map("user_id")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  user                 User                   @relation(fields: [userId], references: [id])
  eventos              Evento[]
  pagamentos           Pagamento[]
  alunos               PreferenciasAluno[]
  personais            PreferenciasPersonal[]
}

model Pagamento {
  id             Int               @id @default(autoincrement())
  valor          Float
  dataPagamento  DateTime
  dataVencimento DateTime
  status         StatusPagamento   @default(PENDENTE)
  formaPagamento String
  tipoPlano      TipoPlano         @default(MENSAL)
  observacoes    String?
  alunoId        Int               @map("aluno_id")
  academiaId     Int               @map("academia_id")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  academia       Academia          @relation(fields: [academiaId], references: [id])
  aluno          PreferenciasAluno @relation(fields: [alunoId], references: [id])
}

model Treino {
  id         Int               @id @default(autoincrement())
  diaSemana  Int
  alunoId    Int               @map("aluno_id")
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  exercicios Exercicio[]
  aluno      PreferenciasAluno @relation(fields: [alunoId], references: [id])
}

model Exercicio {
  id         Int      @id @default(autoincrement())
  name       String
  sets       Int
  time       String
  restTime   String
  repsPerSet Int
  status     String
  image      String
  treinoId   Int      @map("treino_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  treino     Treino   @relation(fields: [treinoId], references: [id], onDelete: Cascade)
}

model Report {
  id         Int                   @id @default(autoincrement())
  tipo       String
  valor      Float
  data       DateTime              @default(now())
  observacao String?
  alunoId    Int                   @map("aluno_id")
  personalId Int?                  @map("personal_id")
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  aluno      PreferenciasAluno     @relation(fields: [alunoId], references: [id])
  personal   PreferenciasPersonal? @relation(fields: [personalId], references: [id])
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime
  status      String   @default("pending")
  deletable   Boolean  @default(true)
  createdBy   Int
  assignedTo  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assignee    User?    @relation("AssignedTasks", fields: [assignedTo], references: [id])
  creator     User     @relation("CreatedTasks", fields: [createdBy], references: [id])
}

model Evento {
  id         Int              @id @default(autoincrement())
  titulo     String
  descricao  String
  dataInicio DateTime
  dataFim    DateTime
  local      String
  academiaId Int              @map("academia_id")
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  tipo       String
  academia   Academia         @relation(fields: [academiaId], references: [id])
  presencas  EventoPresenca[]
}

model EventoPresenca {
  id         Int      @id @default(autoincrement())
  eventoId   Int      @map("evento_id")
  userId     Int      @map("user_id")
  comentario String?
  createdAt  DateTime @default(now())
  evento     Evento   @relation(fields: [eventoId], references: [id], onDelete: Cascade)

  @@unique([eventoId, userId])
}

enum Role {
  ALUNO
  PERSONAL
  ACADEMIA
}

enum StatusPagamento {
  PAGO
  PENDENTE
  ATRASADO
}

enum TipoPlano {
  MENSAL
  TRIMESTRAL
  SEMESTRAL
  ANUAL
}
